
import { useState, useCallback } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { 
  Emprestimo, 
  DevolucaoEmprestimo, 
  EmprestimoResumo, 
  NovoEmprestimoData, 
  NovaDevolucaoData,
  EmprestimoStatus 
} from '@/types/emprestimo';

export const useEmprestimos = () => {
  const queryClient = useQueryClient();

  // Query to fetch all empréstimos with resumo
  const { data: emprestimos = [], isLoading, error } = useQuery({
    queryKey: ['emprestimos'],
    queryFn: async (): Promise<EmprestimoResumo[]> => {
      const { data, error } = await supabase
        .from('emprestimos_resumo')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      
      // Convert the string status from database to EmprestimoStatus type
      return (data || []).map(item => ({
        ...item,
        status: item.status as EmprestimoStatus
      }));
    },
  });

  // Mutation to create new empréstimo
  const createEmprestimoMutation = useMutation({
    mutationFn: async (data: NovoEmprestimoData): Promise<Emprestimo> => {
      // Don't include numero_processo as it's auto-generated by the trigger
      const insertData = {
        cliente_cnpj: data.cliente_cnpj,
        cliente_nome: data.cliente_nome,
        danfe_emprestimo: data.danfe_emprestimo,
        ref_produto_emprestado: data.ref_produto_emprestado,
        desc_produto_emprestado: data.desc_produto_emprestado,
        valor_emprestimo_dolar: data.valor_emprestimo_dolar,
        data_emprestimo: data.data_emprestimo,
        data_saida: data.data_saida,
        id_importacao_direta: data.id_importacao_direta,
        observacoes: data.observacoes
      };

      const { data: result, error } = await supabase
        .from('emprestimos')
        .insert(insertData)
        .select()
        .single();

      if (error) throw error;
      return result;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['emprestimos'] });
    },
  });

  // Mutation to create devolução
  const createDevolucaoMutation = useMutation({
    mutationFn: async (data: NovaDevolucaoData): Promise<DevolucaoEmprestimo> => {
      const { data: result, error } = await supabase
        .from('emprestimos_devolucoes')
        .insert(data)
        .select()
        .single();

      if (error) throw error;
      return result;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['emprestimos'] });
    },
  });

  // Query to fetch empréstimos by importação direta
  const getEmprestimosByImportacao = useCallback(async (importacaoId: string): Promise<EmprestimoResumo[]> => {
    const { data, error } = await supabase
      .from('emprestimos_resumo')
      .select('*')
      .eq('id_importacao_direta', importacaoId);

    if (error) throw error;
    
    // Convert the string status from database to EmprestimoStatus type
    return (data || []).map(item => ({
      ...item,
      status: item.status as EmprestimoStatus
    }));
  }, []);

  // Utility functions
  const getStatusColor = (status: EmprestimoStatus): string => {
    switch (status) {
      case 'ATIVO':
        return 'text-blue-600 bg-blue-100';
      case 'PARCIAL':
        return 'text-yellow-600 bg-yellow-100';
      case 'QUITADO':
        return 'text-green-600 bg-green-100';
      case 'EM_DEBITO':
        return 'text-red-600 bg-red-100';
      case 'EM_SUPERAVIT':
        return 'text-purple-600 bg-purple-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const formatCurrency = (value: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(value);
  };

  const calcularMetricas = (emprestimos: EmprestimoResumo[]) => {
    const emAberto = emprestimos.filter(e => e.status === 'ATIVO' || e.status === 'PARCIAL').length;
    const quitados = emprestimos.filter(e => e.status === 'QUITADO').length;
    const saldoDevedor = emprestimos
      .filter(e => e.saldo > 0)
      .reduce((acc, e) => acc + e.saldo, 0);
    const saldoCredor = Math.abs(emprestimos
      .filter(e => e.saldo < 0)
      .reduce((acc, e) => acc + e.saldo, 0));

    return {
      emAberto,
      quitados,
      saldoDevedor,
      saldoCredor
    };
  };

  return {
    emprestimos,
    isLoading,
    error,
    criarEmprestimo: createEmprestimoMutation.mutateAsync,
    registrarDevolucao: createDevolucaoMutation.mutateAsync,
    getEmprestimosByImportacao,
    getStatusColor,
    formatCurrency,
    calcularMetricas,
    isCreating: createEmprestimoMutation.isPending,
    isRegisteringReturn: createDevolucaoMutation.isPending,
  };
};
